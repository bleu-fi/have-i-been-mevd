# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2024-04-12T14:29:34+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field


class MevTransaction(BaseModel):
    block_number: int = Field(
        ..., description='ethereum block number', example=16824820
    )
    tx_index: int = Field(
        ..., description='index of the transaction in a block', example=1
    )
    mev_type: str = Field(
        ...,
        description='the type of MEV (sandwich, backrun, liquid, arb, frontrun, swap)',
        example='frontrun',
    )
    protocol: Optional[str] = Field(
        None,
        description='swap protocol where relevant. curve, unknown, uniswap2, zerox, bancor, uniswap3, balancer1, compoundv2, aave or multiple if several protocols were used in the transaction which cannot be differentiated',
        example='uniswap3',
    )
    user_loss_usd: Optional[float] = Field(
        None, description='estimated loss to user from MEV in USD', example=-34.42
    )
    extractor_profit_usd: Optional[float] = Field(
        None,
        description='estimated profit to the extractor from MEV in USD',
        example=54.23,
    )
    user_swap_volume_usd: Optional[float] = Field(
        None,
        description='the volume of swaps in the transaction in USD (where applicable) less the extractor_swap_volume_usd',
        example=1354.23,
    )
    user_swap_count: Optional[int] = Field(
        None,
        description='the number of swaps in the transaction (where applicable) less the extractor_swap_count',
        example=2,
    )
    extractor_swap_volume_usd: Optional[float] = Field(
        None,
        description='the volume of swaps related to extraction, such as the frontrun and backrun in a sandwich',
        example=554.23,
    )
    extractor_swap_count: Optional[int] = Field(
        None,
        description='the count of swaps related to extraction, such as the frontrun and backrun in a sandwich',
        example=1,
    )
    imbalance: Optional[float] = Field(
        None,
        description='sandwich imbalance percentage (frontrun, backrun only). A non-zero value indicates the sandwich was overweight on that side and needed to be rebalanced. backrun imbalance = (calculated back out - original back out) / calculated back out, frontrun imbalance = (calculated front in - original front in) / calculated front in',
        example=0.1442,
    )
    address_from: Optional[str] = Field(
        None,
        description='transaction from address',
        example='0x039dc7c4a5769ca80c9e5c0cee5c8b287faeb3af',
    )
    address_to: Optional[str] = Field(
        None,
        description='transaction to address',
        example='0x039dc7c4a5769ca80c9e5c0cee5c8b287faeb3af',
    )
    arrival_time_us: Optional[datetime] = Field(
        None,
        description='time the transaction was first seen by our US node',
        example='2023-03-03T11:52:19.444928Z',
    )
    arrival_time_eu: Optional[datetime] = Field(
        None,
        description='time the transaction was first seen by our European node',
        example='2023-03-03T11:52:19.444928Z',
    )
    arrival_time_as: Optional[datetime] = Field(
        None,
        description='time the transaction was first seen by our Asian node',
        example='2023-03-03T11:52:19.444928Z',
    )


class MevTransactionSummary(BaseModel):
    mev_type: str = Field(
        ..., description='the type of MEV (sandwich, swap)', example='sandwich'
    )
    sum_user_loss_usd: Optional[float] = Field(
        None,
        description='total estimated loss to this account from MEV in USD',
        example=-3434.42,
    )
    sum_user_swap_volume_usd: Optional[float] = Field(
        None,
        description='total volume of swaps made by this account in USD (less any volume from extraction)',
        example=135423.23,
    )
    sum_user_swap_count: Optional[int] = Field(
        None,
        description='the number of swaps made by this account (less any volume from extraction)',
        example=2,
    )
    sum_extractor_profit_usd: Optional[float] = Field(
        None, description='total estimated profit made by this account from MEV in USD'
    )
    sum_extractor_swap_volume_usd: Optional[float] = Field(
        None,
        description='total volume of swaps made by this account in USD when extracting value',
    )
    sum_extractor_swap_count: Optional[int] = Field(
        None,
        description='the total number of swaps made by this account when extracting value',
    )
